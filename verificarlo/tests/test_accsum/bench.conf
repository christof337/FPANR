//######################################
//## Author: Eric Petit
//## Mail eric.petit@prism.uvsq.fr
//#####################################

//define verbosity level 
//warning: on-going feature
#define VERBOSE_TEST 1


/////////////////////////////////////////////////////////////////
//enable execution timing with rdtsc
#define TIME
/////////////////////////////////////////////////////////////////

#ifdef TIME

//generated output definition for time
//#define TIME_FILE_OUTPUT
#define TIME_STD_OUTPUT

#endif

////////////////////////////////////////////////////////////////
//enable papi profiling
//#define PAPI
//CAUTION: using papi as an influence on mesured time
////////////////////////////////////////////////////////////////

#ifdef PAPI

//generated output definition for PAPI
//#define PAPI_FILE_OUTPUT //not implemented yet
#define PAPI_STD_OUTPUT 

//papi option, can only use ONCE at a time 
//#define PAPI_IPC
//#define PAPI_FLOPS
//#define PAPI_FLIPS
#define PAPI_TEST
#endif

////////////////////////////////////////////////////////////////
//print summation result for checking: usefull for ICC ;-)
#define RESULT_CHECK
////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
//number of test done for each value for each bench
#define N_TEST 3
////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
//algorithm selection; defined desired ones
////////////////////////////////////////////////////////////////


//original version of accSum
#define ACCSUM

//with hand gcc vectorization taking care of semantics
#define ACCSUMVECT

//OpenMP version of accSum with bad (unsafe: numerical instability) reduction parrallelisation
#define ACCSUMPAR

//original version
#define FASTACCSUM

//original version with outlined loop
//#define FASTACCSUMoutlined

//with hand computed constant (don't let C-preprocessor compute them)
//#define FASTACCSUMb

//with hand unrolling (2) of extract vetor
//#define FASTACCSUMopt2

//with hand vectorization
//#define FASTACCSUMVect

//with hand unrolling (2) of extract vetor and outlined loops
//#define FASTACCSUMopt2_outlined

//with hand unrolling (3) of extract vetor
//#define FASTACCSUMopt3

//with hand unrolling (4) of extract vetor
//#define FASTACCSUMopt4

//sum2 algorithm for double precision summation
#define SUM2

//ddsum algorithm for double precision summation (compensation)
#define DDSUM

//ddsum with inlined and optimized call to TwoSum and FastTwoSum (as macro they are albready inlined but without optimization)
//#define DDSUMbis





////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//conditionment value definition; each value need three input file with n=100,1000,10000, use "make gensum" and "gensum" command
////////////////////////////////////////////////////////////////
#define NB_MAX_C 18

//how many C to use from 0 to NB_C
#define NB_C 5

#define initTabC() {\
	\
	C[0]=10e4;\
	C[1]=10e8;\
	C[2]=10e12;\
	C[3]=10e16;\
	C[4]=10e20;\
	C[5]=10e24;\
	C[6]=10e28;\
	C[7]=10e32;\
	C[8]=10e36;\
	C[9]=10e40;\
	C[10]=10e44;\
	C[11]=10e48;\
	C[12]=10e52;\
	C[13]=10e56;\
	C[14]=10e60;\
	C[15]=10e64;\
	C[16]=10e68;\
	C[17]=10e72;\
	\
	C_EXP[0]=4;\
	C_EXP[1]=8;\
	C_EXP[2]=12;\
	C_EXP[3]=16;\
	C_EXP[4]=20;\
	C_EXP[5]=24;\
	C_EXP[6]=28;\
	C_EXP[7]=32;\
	C_EXP[8]=36;\
	C_EXP[9]=40;\
	C_EXP[10]=44;\
	C_EXP[11]=48;\
	C_EXP[12]=52;\
	C_EXP[13]=56;\
	C_EXP[14]=60;\
	C_EXP[15]=64;\
	C_EXP[16]=68;\
	C_EXP[17]=72;\
}

////////////////////////////////////////////////////////////////
//input data size definition
////////////////////////////////////////////////////////////////

#define NB_MAX_N 59

//Max N to use 
#define NB_N 3 

//Min N to use from 0 to NB_N
#define NB_N_MIN 15

//stride for n from NB_N_min to NB_N*NB_N_STRIDE+NB_N_min by NB_N_STRIDE 
#define NB_N_STRIDE 6

#define initTabN() {\
	N[0]=12;\
	N[1]=24;\
	N[2]=32;\
	N[3]=40;\
	N[4]=52;\
	N[5]=64;\
	N[6]=72;\
	N[7]=80;\
	N[8]=88;\
	N[9]=100;\
	N[10]=200;\
	N[11]=300;\
	N[12]=400;\
	N[13]=500;\
	N[14]=600;\
	N[15]=700;\
	N[16]=800;\
	N[17]=900;\
	N[18]=1000;\
	N[19]=2000;\
	N[20]=3000;\
	N[21]=4000;\
	N[22]=5000;\
	N[23]=6000;\
	N[24]=7000;\
	N[25]=8000;\
	N[26]=9000;\
	N[27]=10000;\
	N[28]=20000;\
	N[29]=30000;\
	N[30]=40000;\
	N[31]=50000;\
	N[32]=60000;\
	N[33]=70000;\
	N[34]=80000;\
	N[35]=90000;\
	N[36]=100000;\
	N[37]=200000;\
	N[38]=300000;\
	N[39]=400000;\
	N[40]=500000;\
	N[41]=600000;\
	N[42]=700000;\
	N[43]=800000;\
	N[44]=900000;\
	N[45]=1000000;\
	N[46]=2000000;\
	N[47]=3000000;\
	N[48]=4000000;\
	N[49]=5000000;\
	N[50]=6000000;\
	N[51]=7000000;\
	N[52]=8000000;\
	N[53]=9000000;\
	N[54]=10000000;\
	N[55]=20000000;\
	N[56]=30000000;\
	N[57]=40000000;\
	N[58]=50000000;\
}



	
	
